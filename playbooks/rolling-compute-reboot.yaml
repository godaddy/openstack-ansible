#!/usr/bin/env ansible-playbook --forks 50
---
#This playbook requires the following variables:
# api_server - this is the server that runs the nova-api instance that we will use to get a list of the running vm's on compute nodes
# hosts - this is the host group to perform the rolling reboot on typically would be: {dev|test|stage|prod|appfirst}-compute
# reboot_check_port - This is the port to check to see if the server has come back online
#
 
#Example:
#ansible-playbook compute-rolling-reboot.yaml -k -K --extra-vars "api_server=test-app01 hosts=test-compute"

- hosts: '{{ hosts }}'
  sudo: yes
  serial: 1
  tasks:
  - name: Gather list of all running vm's
    shell: source /root/keystonerc_admin; nova list --all-tenants --status Active --fields host,OS-EXT-SRV-ATTR:instance_name,status | grep ACTIVE | awk -F" | " '{if(a[$4]){a[$4]=a[$4]","$2"+"$6} else { a[$4]=$2"+"$6}} END {for (i in a) { print i":"a[i]} }'
    register: running_vms
    delegate_to: '{{ api_server }}'

  - include: /etc/ansible/playbooks/tasks/rolling-reboot.yaml

  - name: Verify running vm's are still running
    shell: rc=$(echo "0"); vmlist=$( echo "{{running_vms.stdout }}" | grep {{inventory_hostname }} |cut -d":" -f2,2 |awk -F"," '{for (i=1; i<=NF; i++) print $i}'); virshlist=$( virsh list | grep running | awk '{print $2}'); for i in $vmlist; do vm=$( echo $i | cut -d"+" -f2,2 ); tmp=$( echo "$virshlist" | grep $vm); if [ $? -eq 1 ]; then uuid=$( echo "$i" | cut -d"+" -f1,1); echo "$uuid"; rc=$(echo "1"); fi; done; if [ "$rc" == "1" ]; then false; else true; fi
    register: vms_not_running
  - debug: msg="{{vms_not_running}}"
    when: vms_not_running.rc == 1
